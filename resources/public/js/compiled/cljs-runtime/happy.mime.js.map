{"version":3,"sources":["happy/mime.cljc"],"mappings":";AAGA,uBAAA,vBAAMA,sDACHC;AADH,AAEE,OAACC,gBAAM,qDAAA,rDAACC,mDAAaF;;AAEvB,qBAAA,rBAAMG,kDACHH;AADH,AAEE,OAACI,iBAAO,qDAAA,rDAACF,mDAAaF;;AAExB,oBAAA,pBAAMK,gDACHL;AADH,AAEE,OAACI,iBAAO,qDAAA,rDAACF,mDAAaF;;AAExB,6BAAA,7BAAMM,kEACHN;AADH,AAEE,oDAAA,7CAACO,iDAAM,AAACJ,mBAAQH;;AAElB,qBAAA,rBAAMQ,kDACHR;AADH,AAEE,IAAAS,qBAAY,AAACJ,kBAAOL;AAApB,AAAA,oBAAAS;AAAA,SAAAA,LAASC;AAAT,AACE,6EAAA,zBAAK,AAACX,qBAAUC,oDAAOU;;AACvBV","names":["happy.mime/top-level","s","cljs.core/first","clojure.string.split","happy.mime/subtype","cljs.core/second","happy.mime/suffix","happy.mime/wildcard?","cljs.core._EQ_","happy.mime/generic","temp__5751__auto__","su"],"sourcesContent":["(ns happy.mime\n  (:require [clojure.string :as string]))\n\n(defn top-level\n  [s]\n  (first (string/split s #\"/\")))\n\n(defn subtype\n  [s]\n  (second (string/split s #\"/\")))\n\n(defn suffix\n  [s]\n  (second (string/split s #\"\\+\")))\n\n(defn wildcard?\n  [s]\n  (= \"*\" (subtype s)))\n\n(defn generic\n  [s]\n  (if-let [su (suffix s)]\n    (str (top-level s) \"/\" su)\n    s))"]}