{"version":3,"sources":["happy/representors.cljc"],"mappings":"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","names":["happy$representors$Representator$_mime_types$dyn","x__4509__auto__","m__4510__auto__","happy.representors/-mime-types","goog/typeOf","m__4508__auto__","cljs.core/missing-protocol","happy$representors$Representator$_serialize$dyn","happy.representors/-serialize","happy$representors$Representator$_unserialize$dyn","happy.representors/-unserialize","happy.representors/Representator","_","o","happy.representors/valid?","s","t","happy.mime/wildcard?","cljs.core._EQ_","happy.mime/top-level","happy.mime/generic","happy.representors/valid-for-mime?","r","p1__27360#","cljs.core/some","happy.representors/matching-representor","req","v","mt","temp__5751__auto__","ct","or__4212__auto__","cljs.core/first","happy.headers/content-type","p1__27361#","happy.representors/as-request-interceptor","p__27363","vec__27364","cljs.core.nth","om","cljs.core/contains?","cljs.core.assoc","p1__27362#","cljs.core.update","happy.representors/as-response-interceptor","resp","p1__27367#","happy.representors/binary-representor","js/happy","js/happy.representors","js/happy.representors.t_happy$representors27368","happy.representors/t_happy$representors27368","_27370","meta27369","cljs.core/PROTOCOL_SENTINEL","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","happy.representors/->t_happy$representors27368","happy.representors/text-representor","js/happy.representors.t_happy$representors27371","happy.representors/t_happy$representors27371","_27373","meta27372","happy.representors/->t_happy$representors27371"],"sourcesContent":["(ns happy.representors\n  (:require [happy.headers :as hea]\n            [happy.mime :as mim]))\n\n(defprotocol Representator\n  (-mime-types [_])\n  (-serialize [_ o])\n  (-unserialize [_ o]))\n\n(defn valid?\n  [s t]\n  (if (mim/wildcard? s)\n    (= (mim/top-level s) (mim/top-level t))\n    (= s (mim/generic t))))\n\n(defn valid-for-mime?\n  [s r]\n  (some #(if (valid? % s) r) (-mime-types r)))\n\n(defn matching-representor\n  [req v mt]\n  (if-let [ct (or mt (first (hea/content-type (:headers req))))]\n    (some #(valid-for-mime? ct %) v)))\n\n(defn as-request-interceptor\n  [v]\n  (fn [[req om :as o]]\n    (if (contains? req :body)\n      (if-let [r (matching-representor req v (:override-request-mime-type om))]\n        (assoc o 0 (update req :body #(-serialize r %)))))))\n\n(defn as-response-interceptor\n  [v]\n  (fn [resp om]\n    (if (contains? resp :body)\n      (if-let [r (matching-representor resp v (:override-response-mime-type om))]\n        (update resp :body #(-unserialize r %))))))\n\n(def binary-representor\n  (reify Representator\n    (-mime-types [_] #{\"image/*\" \"audio/*\" \"video/*\"})\n    (-serialize [_ s] s)\n    (-unserialize [_ s] s)))\n\n(def text-representor\n  (reify Representator\n    (-mime-types [_] #{\"text/*\"})\n    (-serialize [_ s] s)\n    (-unserialize [_ s] s)))\n"]}