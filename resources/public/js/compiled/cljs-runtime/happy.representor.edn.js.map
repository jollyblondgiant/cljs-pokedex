{"version":3,"sources":["happy/representor/edn.cljc"],"mappings":";AAIA,AAAA,+BAAA,uCAAAA,tEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,2DAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,6DAAA,7DAAMD;AAAN,AACM,kEAAA,3DAACE;;;AADP,CAAA,6DAAA,7DAAMF,wEAEFG;AAFJ,AAGG,AAAA,GAAA,QAAAC,kCAAAC,8CAAAC,kDAAAC;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,AAAAC,sGAAA,WAAAC,OAAAC;;AAAA,AAAA,IAAAD,aAAA;+DADCN,/DACD,AAAA,YAAAK,4DAAAE;;;AAAA,CAAA,AAAA,AAAAF,6FAAA,WAAAC;;AAAA,AAAA,IAAAA,aAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,AAAAF,iGAAAG;;AAAA,CAAA,AAAA,AAAAH,oHAAA,WACgBS;;AADhB,AAAA,YAAA,RACgBA;AADhB,AAAA,wFAAA;;;AAAA,CAAA,AAAA,AAAAT,mHAAA,WAEeS,EAAEC;;AAFjB,AAAA,YAAA,RAEeD;AAFf,AAEoB,OAACE,wGAAOD;;;AAF5B,CAAA,AAAA,AAAAV,qHAAA,WAGiBS,EAAEC;;AAHnB,AAAA,YAAA,RAGiBD;AAHjB,AAII,GAAI,OAASC;AACyB,OAACE,sDAAmBF;;AAC3B,wDAAA,KAAA,KAAA,3DAACG,+CAAYH;;;;AANhD,CAAA,AAAAV,8DAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,oEAAA;;AAAA,CAAA,AAAAA,uEAAA;;AAAA,CAAA,AAAAA,4EAAA,WAAAI,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;AAAA;;;4HADCV,5HACDa,0DAAA,wEAAAN;+DADCP,/DACD,AAAA,YAAAK,yDAAAE;;;AAAAF;;+DADCL,/DACD,YAAAK,qDAAA;;;AAHH,CAAA,uDAAA,vDAAMR;;AAAN","names":["var_args","G__27378","happy.representor.edn/create","js/Error","happy.representor.edn.create","m","js/happy","js/happy.representor","js/happy.representor.edn","js/happy.representor.edn.t_happy$representor$edn27379","happy.representor.edn/t_happy$representor$edn27379","_27381","meta27380","cljs.core/PROTOCOL_SENTINEL","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","happy.representor.edn/->t_happy$representor$edn27379","_","o","cljs.core.pr_str","cljs.reader.read_string","cljs.reader.read"],"sourcesContent":["(ns happy.representor.edn\n  (:require #?(:clj [clojure.edn :as edn] :cljs [cljs.reader :as reader])\n            [happy.representors :refer [Representator]]))\n\n(defn create\n  ([] (create nil))\n  ([m]\n   (reify Representator\n     (-mime-types [_] #{\"application/edn\"})\n     (-serialize [_ o] (pr-str o))\n     (-unserialize [_ o]\n       (if (string? o)\n         #?(:clj (edn/read-string m o) :cljs (reader/read-string o))\n         #?(:clj (edn/read m o) :cljs (reader/read o nil nil nil)))))))\n"]}