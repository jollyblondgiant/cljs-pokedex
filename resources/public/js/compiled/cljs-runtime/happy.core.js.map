{"version":3,"sources":["happy/core.cljc"],"mappings":"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","names":["happy$core$Client$_supports$dyn","x__4509__auto__","m__4510__auto__","happy.core/-supports","goog/typeOf","m__4508__auto__","cljs.core/missing-protocol","happy$core$Client$_send_BANG_$dyn","happy.core/-send!","happy.core/Client","_","req","m","happy$core$RequestHandler$_abort$dyn","happy.core/-abort","happy.core/RequestHandler","happy$core$ResponseHandler$_status$dyn","happy.core/-status","happy$core$ResponseHandler$_body$dyn","happy.core/-body","happy$core$ResponseHandler$_header$dyn","happy.core/-header","happy$core$ResponseHandler$_headers$dyn","happy.core/-headers","happy.core/ResponseHandler","s","happy.core/default-options","cljs.core.atom","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","happy.core/swap-options!","seq27383","G__27384","cljs.core/first","cljs.core/next","self__4805__auto__","f","args","cljs.core.apply","cljs.core/swap!","happy.core/default-option-combiner","r","l","cljs.core/sequential?","cljs.core.concat","cljs.core/map?","cljs.core.merge_with","or__4212__auto__","G__27388","happy.core/merge-options!","js/Error","happy.core.merge_options_BANG_","p1__27385#","p2__27386#","happy.core.swap_options_BANG_","happy.core/merge-representors!","v","happy.representors/as-request-interceptor","happy.representors/as-response-interceptor","happy.core/reset-options!","cljs.core/reset!","happy.core/set-default-client!","c","cljs.core/assoc","happy.core/apply-interceptors","o","p1__27389#","p2__27390#","cljs.core.reduce","happy.core/apply-request-interceptors","om","happy.core/apply-response-interceptors","resp","G__27392","happy.core/progress","t","happy.core.progress","b","cljs.core.merge","happy.core/finalize","G__27393","happy.core/response","G__27395","happy.core/failure","happy.core.failure","cljs.core.assoc","happy.core/validate-request!","met","and__4210__auto__","fexpr__27397","cljs.core.ex_info","fexpr__27398","p1__27396#","cljs.core/every?","cljs.core/key","cljs.core/val","happy.core/validate-options!","temp__5751__auto__","sm","as","cljs.core/not","fexpr__27399","fexpr__27400","happy.core/normalize-request","cljs.core/contains?","p1__27401#","cljs.core.update","cljs.core.into","iter__4611__auto__","s__27403","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","cljs.core/count","b__27405","cljs.core/chunk-buffer","i__27404","vec__27406","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__27402","cljs.core/chunk-rest","vec__27409","cljs.core/cons","cljs.core/rest","k","clojure.string/lower-case","happy.core/send!","vec__27412","cljs.core/deref","G__27416","happy.core/GET","url","happy.core.GET","hm","G__27418","happy.core/HEAD","happy.core.HEAD","G__27420","happy.core/POST","happy.core.POST","G__27422","happy.core/PUT","happy.core.PUT","G__27424","happy.core/PATCH","happy.core.PATCH","G__27426","happy.core/DELETE","happy.core.DELETE","G__27428","happy.core/OPTIONS","happy.core.OPTIONS","happy.representor.edn.create","happy.representors/text-representor","happy.representors/binary-representor","cljs.core/chunk-first"],"sourcesContent":["(ns happy.core\n  (:require [clojure.string :as string]\n            [happy.representors :as repr]\n            [happy.representor.edn :as repre]))\n\n(defprotocol Client\n  (-supports [_])\n  (-send! [_ req m] \"Returns a RequestHandler\"))\n\n(defprotocol RequestHandler\n  (-abort [_]))\n\n(defprotocol ResponseHandler\n  (-status [_])\n  (-body [_])\n  (-header [_ s])\n  (-headers [_]))\n\n; Options handling\n\n(def default-options (atom nil))\n\n(defn swap-options!\n  [f & args]\n  (apply swap! default-options f args))\n\n(defn default-option-combiner\n  [r l]\n  \"Combines seq by concatening them and map by merging them.\n   For all others types the new value takes precedence.\"\n  (cond\n    (sequential? l) (concat l r)\n    (map? l) (merge-with default-option-combiner l r)\n    :else (or l r)))\n\n(defn merge-options!\n  ([m] (merge-options! m default-option-combiner))\n  ([m f]\n   (swap-options! #(merge-with f %1 %2) m)))\n\n(defn merge-representors!\n  [v]\n  (merge-options!\n    {:request-interceptors [(repr/as-request-interceptor v)]\n     :response-interceptors [(repr/as-response-interceptor v)]}))\n\n(defn reset-options!\n  []\n  (reset! default-options nil))\n\n(defn set-default-client!\n  [c]\n  (swap-options! assoc :client c))\n\n; Utils methods for Client implementations\n\n(defn apply-interceptors\n  [f o v]\n  (if v\n    (reduce #(let [r (f %1 %2)] (or r %1)) o v)\n    o))\n\n(defn apply-request-interceptors\n  [req om]\n  (apply-interceptors (fn [o f] (f o)) [req om] (:request-interceptors om)))\n\n(defn apply-response-interceptors\n  [resp om]\n  (apply-interceptors (fn [o f] (f o om)) resp (:response-interceptors om)))\n\n(defn progress\n  ([t] (progress t nil))\n  ([t m]\n   (let [b {:type :progress :direction t}]\n     (if m\n       (merge b m)\n       b))))\n\n(defn finalize\n  [f resp m]\n  (if f\n    (f (apply-response-interceptors resp m))))\n\n(defn response\n  [r]\n  {:type :response\n   :status (-status r)\n   :body (-body r)\n   :headers (-headers r)})\n\n(defn failure\n  ([t] (failure t nil))\n  ([t s]\n   (let [m {:type :failure\n            :termination t}]\n     (if s\n       (assoc m :reason s)\n       m))))\n\n(defn validate-request!\n  [req]\n  (let [met (:method req)]\n    (if (and (#{\"POST\" \"PUT\" \"PATCH\"} met) (nil? (:body req)))\n      (throw (ex-info (str \"Method \" met \" requires a body\" ) req)))\n    (if (and (#{\"GET\" \"HEAD\" \"OPTIONS\"} met) (not (nil? (:body req))))\n      (throw (ex-info (str \"Method \" met \" requires no body\" ) {}))))\n  (if-not (every? #(and (string? (key %)) (string? (val %))) (:headers req))\n    (throw (ex-info \"Headers must be a String / String map\" {}))))\n\n(defn validate-options!\n  [m]\n  (if-let [c (:client m)]\n    (let [sm (-supports c)]\n      (if-let [as (:request-body-as m)]\n        (if-not ((:request-body-as sm) as)\n          (throw (ex-info (str \"Unsupported :request-body-as : \" as) {:m m}))))\n      (if-let [as (:response-body-as m)]\n        (if-not ((:response-body-as sm) as)\n          (throw (ex-info (str \"Unsupported :response-body-as : \" as) {:m m})))))\n    (throw (ex-info \"No :client set\" {:m m}))))\n\n(defn normalize-request\n  [req]\n  (if (contains? req :headers)\n    (update req :headers\n      #(into {}\n        (for [[k v] %]\n          [(string/lower-case k) v])))\n    req))\n\n(defn send!\n  [req m]\n  (let [req (normalize-request req)\n        f (or (:default-option-combiner m) (:default-option-combiner @default-options) default-option-combiner)\n        [req m] (apply-request-interceptors req (merge-with f @default-options m))]\n    (validate-request! req)\n    (validate-options! m)\n    (-send! (:client m) req m)))\n\n(defn GET\n  ([url] (GET url {}))\n  ([url hm] (GET url hm nil))\n  ([url hm m]\n   (send! {:method \"GET\" :url url :headers hm} m)))\n\n(defn HEAD\n  ([url] (HEAD url {}))\n  ([url hm] (HEAD url hm nil))\n  ([url hm m]\n   (send! {:method \"HEAD\" :url url :headers hm} m)))\n\n(defn POST\n  ([url b] (POST url {} b))\n  ([url hm b] (POST url hm b nil))\n  ([url hm b m]\n   (send! {:method \"POST\" :url url :headers hm :body b} m)))\n\n(defn PUT\n  ([url b] (PUT url {} b))\n  ([url hm b] (PUT url hm b nil))\n  ([url hm b m]\n   (send! {:method \"PUT\" :url url :headers hm :body b} m)))\n\n(defn PATCH\n  ([url b] (PATCH url {} b))\n  ([url hm b] (PATCH url hm b nil))\n  ([url hm b m]\n   (send! {:method \"PATCH\" :url url :headers hm :body b} m)))\n\n(defn DELETE\n  ([url] (DELETE url {}))\n  ([url hm] (DELETE url hm nil))\n  ([url hm m]\n   (send! {:method \"DELETE\" :url url :headers hm} m)))\n\n(defn OPTIONS\n  ([url] (OPTIONS url {}))\n  ([url hm] (OPTIONS url hm nil))\n  ([url hm m]\n   (send! {:method \"OPTIONS\" :url url :headers hm} m)))\n\n; Setup default options\n(merge-representors!\n  [(repre/create) repr/text-representor repr/binary-representor])\n"]}