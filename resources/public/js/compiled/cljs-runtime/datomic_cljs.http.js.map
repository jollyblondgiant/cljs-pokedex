{"version":3,"sources":["datomic_cljs/http.cljs"],"mappings":"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","names":["datomic-cljs.http/node-context?","js/exports","cljs.core.not_EQ_","context","datomic-cljs.http/urlencode-kvs","kvs","iter__4611__auto__","s__27519","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","cljs.core/count","b__27522","cljs.core/chunk-buffer","i__27521","vec__27524","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__27518","cljs.core/chunk-rest","vec__27530","cljs.core/first","cljs.core/cons","cljs.core/rest","k","v","js/encodeURIComponent","cljs.core/name","clojure.string.join","datomic-cljs.http/urlencode-qs","qs-kvs","datomic-cljs.http/parse-headers","header-str","cljs.core.into","s__27540","b__27542","i__27541","vec__27543","vec__27546","iter__27539","vec__27549","vec__27552","header","clojure.string/split-lines","clojure.string.split","clojure.string/trim","cljs.core.keyword","clojure.string/lower-case","p__27557","map__27558","cljs.core/--destructure-map","cljs.core.get","datomic-cljs.http/browser-request","method","uri","headers","qs","form","opts","callback","js-req","js/XMLHttpRequest","query-str","url","cljs.core.assoc","G__27560","G__27561","G__27562","e","seq__27563","chunk__27564","count__27565","i__27566","vec__27574","c__4638__auto__","cljs.core/chunk-first","vec__27577","cljs.core/next","or__4212__auto__","datomic-cljs.http/js-request","req","e27582","js/require","js/Error","js/console","js/process","cb","G__27584","G__27585","cljs.core/clj->js","datomic-cljs.http/response-handler","c-resp","edn?","err","resp","body","cljs.core.async.put_BANG_","cljs.core.js__GT_clj","and__4210__auto__","cljs.core/re-find","cljs.reader.read_string","cljs.core.async/close!","var_args","G__27590","datomic-cljs.http/request","datomic_cljs.http.request","map__27591","cljs.core.async.chan","G__27592","cljs.core/Keyword","G__27594","G__27595","datomic-cljs.http/body","c-body","c__26604__auto__","cljs.core.async.impl.dispatch/run","f__26605__auto__","switch__26534__auto__","state_27632","state_val_27633","inst_27600","inst_27608","inst_27609","statearr-27637","cljs.core.async.impl.ioc-helpers/take!","statearr-27638","inst_27623","statearr-27639","inst_27620","statearr-27640","inst_27601","inst_27627","cljs.core.async.impl.ioc-helpers/put!","inst_27629","inst_27630","statearr-27641","cljs.core.async.impl.ioc-helpers/return-chan","inst_27625","statearr-27642","inst_27602","statearr-27643","statearr-27644","statearr-27645","statearr-27646","inst_27612","inst_27613","statearr-27649","statearr-27650","inst_27606","inst_27605","statearr-27652","statearr-27653","statearr-27654","statearr-27655","inst_27615","inst_27616","inst_27617","statearr-27656","statearr-27657","statearr-27659","state-machine__26535__auto__","ret-value__26536__auto__","result__26537__auto__","cljs.core/keyword-identical?","ex__26538__auto__","e27660","statearr-27661","statearr-27662","state__26606__auto__","statearr-27663","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core/not"],"sourcesContent":["(ns datomic-cljs.http\n  (:require [cljs.core.async :as async :refer [<!]]\n            [cljs.reader :as reader]\n            [clojure.string :as str])\n  (:require-macros [cljs.core.async.macros :refer [go]]\n                   [datomic-cljs.macros :refer [>!x]]))\n\n(def node-context?\n  (and (exists? js/exports)\n       (not= js/exports (this-as context (.-exports context)))))\n\n;;; browser shims\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn- urlencode-kvs [kvs]\n  (->> (for [[k v] kvs\n             :when (not (nil? v))]\n         (str (js/encodeURIComponent (name k))\n              \"=\"\n              (js/encodeURIComponent v)))\n       (str/join \"&\")))\n\n(defn- urlencode-qs [qs-kvs]\n  (str \"?\" (urlencode-kvs qs-kvs)))\n\n(defn- parse-headers [header-str]\n  (into {} (for [header (str/split-lines header-str)\n                 :let [[k v] (str/split header #\":\")\n                       [k v] [(str/trim k) (str/trim v)]]]\n             [(keyword (str/lower-case k)) v])))\n\n(defn- browser-request [{:keys [method uri headers qs form]\n                         :or {method \"GET\" headers {}}\n                         :as opts}\n                        callback]\n  (let [js-req (js/XMLHttpRequest.)\n        query-str (if qs (urlencode-qs qs) \"\")\n        url (str uri query-str)\n        headers (if form\n                  (assoc headers \"Content-Type\" \"application/x-www-form-urlencoded\")\n                  headers)]\n\n    (.addEventListener js-req \"load\"\n                       (fn []\n                         ;; emulate node response... sort of\n                         (set! (.-headers js-req)\n                               (parse-headers (.getAllResponseHeaders js-req)))\n                         (set! (.-statusCode js-req) (.-status js-req))\n                         (callback nil js-req (.-response js-req))))\n\n    ;; The REST server 'sploding probably results in a CORS error on our end\n    (.addEventListener js-req \"error\"\n                       (fn [e]\n                         (.preventDefault e)\n                         (callback e js-req nil)))\n\n    (.open js-req method url true)\n\n    (doseq [[k v] (or headers {})]\n      (.setRequestHeader js-req (name k) v))\n\n    (set! (.-responseType js-req) \"text\")\n\n    (if form\n      (.send js-req (urlencode-kvs form))\n      (.send js-req))))\n\n\n(def ^:private js-request nil)\n(if node-context?\n  (set! js-request (let [req (try (js/require \"request\")\n                                  (catch js/Error e\n                                    (.log js/console \"Error: Cannot find module 'request'.\\nSee datomic-cljs README for installation and dependency notes.\")\n                                    (.exit js/process 1)))]\n                     (fn [opts cb]\n                       (req (clj->js opts) cb))))\n  (set! js-request browser-request))\n\n(defn- response-handler [c-resp edn?]\n  (fn [err resp body]\n    (async/put!\n     c-resp\n     (or err\n         (let [headers (js->clj (.-headers resp)\n                                :keywordize-keys true)]\n           {:status (.-statusCode resp)\n            :headers headers\n            :body (if (and edn? (re-find #\"edn\" (:content-type headers)))\n                    (reader/read-string body)\n                    body)\n            :js-resp resp}))\n     #(async/close! c-resp))))\n\n(defn request\n  \"Make an async request to the given uri, returning a core.async\n   channel eventually containing either an error or a response map\n   containing the following:\n\n     :status, the HTTP status code;\n     :headers, a map of HTTP response headers;\n     :body, the response body;\n     :js-resp, the original JS response object.\n\n   opts is the same options map described in the Request docs:\n   https://github.com/mikeal/request#requestoptions-callback\n\n   Additionally, opts supports {:edn true} which sets the Accept\n   header to application/edn and parses the response body as edn\n   if the response content-type is application/edn.\"\n  ([method uri]\n     (request method uri {}))\n  ([method uri opts]\n     (let [c-resp (async/chan 1)\n           {edn? :edn headers :headers} opts\n           opts (assoc opts\n                  :method (case method\n                            :get \"GET\"\n                            :post \"POST\"\n                            :put \"PUT\"\n                            :head \"HEAD\")\n                  :headers (if edn?\n                             (assoc (or headers {}) :accept \"application/edn\")\n                             headers))]\n       (js-request (assoc opts :uri uri)\n                   (response-handler c-resp edn?))\n       c-resp)))\n\n(defn body\n  \"Expects a response channel, and returns a channel that will\n   eventually contain either the response body (on successful status\n   code) or an error (if the request fails or an unsuccessful status\n   code was returned).\"\n  [c-resp]\n  (let [c-body (async/chan 1)]\n    (go\n      (let [resp (<! c-resp)]\n        (>!x c-body\n             (cond (instance? js/Error resp)\n                   resp\n\n                   (not (<= 200 (:status resp) 299))\n                   (js/Error. (str \"Unsuccessful HTTP status code returned: \" (:status resp)))\n\n                   :else\n                   (:body resp)))))\n    c-body))\n"]}