{"version":3,"sources":["happy/client/xmlhttprequest.cljs"],"mappings":"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","names":["happy.client.xmlhttprequest/reduce-headers","m","line","vec__27434","cljs.core.nth","k","v","clojure.string.split","n","clojure.string/lower-case","clojure.string/trim","temp__5751__auto__","ov","cljs.core.get","cljs.core.assoc","cljs.core.conj","cljs.core/vector?","cljs.core/PersistentVector","happy.client.xmlhttprequest/parse-headers","s","headers","clojure.string/replace","cljs.core.reduce","clojure.string/split-lines","happy.client.xmlhttprequest/progress-details","evt","cljs.core/PROTOCOL_SENTINEL","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","happy.client.xmlhttprequest/XHRRequestHandler","happy.client.xmlhttprequest/->XHRRequestHandler","xhr","_","happy.client.xmlhttprequest/XHRResponseHandler","happy.client.xmlhttprequest/->XHRResponseHandler","happy.client.xmlhttprequest/response-type","G__27445","cljs.core/Keyword","js/Error","p__27450","p__27451","map__27452","cljs.core/--destructure-map","map__27455","happy.client.xmlhttprequest/send!","url","method","body","handler","with-credentials?","timeout","report-progress?","response-body-as","js/XMLHttpRequest","rh","and__4210__auto__","cljs.core.not_EQ_","seq__27457","cljs.core/seq","chunk__27458","count__27459","i__27460","vec__27468","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__27471","cljs.core/first","cljs.core/next","happy.core/finalize","happy.core/response","happy.core.failure","p1__27447#","G__27475","happy.core.progress","cljs.core.merge","p1__27448#","i","cljs.core._EQ_","G__27477","p1__27449#","G__27478","happy.client.xmlhttprequest/create","js/happy","js/happy.client","js/happy.client.xmlhttprequest","js/happy.client.xmlhttprequest.t_happy$client$xmlhttprequest27480","happy.client.xmlhttprequest/t_happy$client$xmlhttprequest27480","_27482","meta27481","happy.client.xmlhttprequest/->t_happy$client$xmlhttprequest27480","req"],"sourcesContent":["(ns happy.client.xmlhttprequest\n  (:require [clojure.string :as string]\n            [happy.core :as h :refer [Client RequestHandler ResponseHandler]]))\n\n; A Client implementation for browsers based on https://xhr.spec.whatwg.org\n\n(defn reduce-headers\n  [m line]\n  (let [[k v] (string/split line #\":\" 2)\n        n (string/lower-case (string/trim k))\n        v (string/trim v)]\n    (if-let [ov (get m n)]\n      (assoc m n (conj (if (vector? ov) ov (vector ov)) v))\n      (assoc m n v))))\n\n(defn parse-headers\n  [s]\n  (let [headers (string/replace s #\"\\n$\" \"\")]\n    (reduce reduce-headers {} (string/split-lines headers))))\n\n(defn progress-details\n  [evt]\n  (if (.-lengthComputable evt)\n    {:loaded (.-loaded evt) :total (.-total evt)}))\n\n(deftype XHRRequestHandler\n  [xhr]\n  RequestHandler\n  (-abort [_] (.abort xhr)))\n\n(deftype XHRResponseHandler\n  [xhr]\n  ResponseHandler\n  (-status [_] (.-status xhr))\n  (-body [_] (.-response xhr))\n  (-header [_ s] (.getResponseHeader xhr s))\n  (-headers [_] (parse-headers (.getAllResponseHeaders xhr))))\n\n(defn response-type\n  [s]\n  (case s\n    :array-buffer \"arraybuffer\"\n    :blob \"blob\"))\n\n(defn send!\n  [{:keys [url method headers body]} {:keys [handler with-credentials? timeout report-progress? response-body-as] :as m}]\n  (let [xhr (js/XMLHttpRequest.)\n        rh (XHRResponseHandler. xhr)]\n    (if with-credentials? (set! (.-withCredentials xhr) true))\n    (if (and response-body-as (not= response-body-as :string))\n      (set! (.-responseType xhr) (response-type response-body-as)))\n    (if timeout (set! (.-timeout xhr) timeout))\n    (.open xhr method url true)\n    (doseq [[k v] headers]\n      (.setRequestHeader xhr k v))\n    (when handler\n      ; load, abort, error and timeout are mutually exclusive\n      (set! (.-onload xhr) #(h/finalize handler (h/response rh) m))\n      (set! (.-onabort xhr) #(h/finalize handler (h/failure :abort) m))\n      (set! (.-onerror xhr) #(h/finalize handler (h/failure :network) m))\n      (if timeout\n        (set! (.-ontimeout xhr) #(h/finalize handler (h/failure :timeout) m)))\n      (when report-progress?\n        (set! (.-onprogress xhr) #(handler (h/progress :receiving (merge {:response rh} (progress-details %)))))\n        (set! (.-onreadystatechange xhr) #(let [i (.. % -target -readyState)] (if (= 2 i) (handler (h/progress :headers-received)))))\n        (if body\n          (set! (.. xhr -upload -onprogress) #(handler (h/progress :sending (progress-details %)))))))\n    (if body\n      (.send xhr body)\n      (.send xhr))\n    (XHRRequestHandler. xhr)))\n\n(defn create\n  []\n  (reify Client\n    (-supports [_]\n      {:progress true\n       :timeout true\n       :request-body-as #{:string :blob :buffer-source}\n       :response-body-as #{:string :blob :array-buffer}\n       :extra-options #{:with-credentials?}})\n    (-send! [_ req m]\n      (send! req m))))"]}